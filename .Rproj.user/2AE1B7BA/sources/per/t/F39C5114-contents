# Quarto: 기사작성과 코딩을 동시에!
우리는 지금까지 `R`의 기초적인 기능을 살펴보면서, 콘솔이라고 하는 창을 이용해 왔습니다. 이 콘솔이라고 하는 창은 R의 엔진, 실제로 프로그램이 돌아가는 곳이라고 볼 수 있습니다. 하지만 콘솔에서는 코드를 작성하고 엔터키를 누르는 순간, 프로그램이 실행되고 맙니다. 지금까지 작성해 온 간단한 코드라면, 이런 방식으로 충분하겠지만, 만약 수십줄, 많게는 수백줄의 코드를 작성하고, 작성한 코드가 한 번에 실행되기를 바란다면, 이것은 그다지 효율적인 방법이 아니겠지요. 따라서, 대부분 프로그래머들은 컴퓨터 메모장에 글을 쓰듯, 먼저 긴 코드를 작성한 후, 이것이 차례차례 콘솔에서 작동되도록 합니다. 이를 위해 작성한 코드로 이루어진 텍스트 파일을 흔히 '스크립트'라고 부릅니다. 하지만 이런 스크립트 방식의코드 작성법은 콘솔을 이용한 방법과는 반대로 작성한 코드의 부분부분이 의도한대로 잘 작동하는지 확인하는 것을 어렵게 만듭니다.

따라서, 우리는 그 중간쯤 되는 '노트북'이라는 방법을 사용하려고 합니다. 노트북 방법을 사용하면, 코드를 작성하면서 중간중간 결과를 확인할 수도 있고, 프로그램을 모두 작성한 후에는 전체 프로그램을 한 번에 실행할 수도 있습니다. 

## 노트북 생성하기
노트북 환경을 이용하는 방법은 여러가지가 있지만, 우리는 "Quarto Document"라는 가장 표준적인 방법을 사용할 것입니다. "Quarto Document"를 사용하려면 새로운 "Quarto Document" 파일을 하나 만들어주면 됩니다. `Rstudio` 상단의 `File` 메뉴에서 `New File`이라고 되어 있는 곳에 마우스 커서를 올려보세요, 그러면 오른쪽에 떠오르는 메뉴에 "Quarto Document"라는 항목이 있을 것입니다. 이를 클릭하면 다음과 같은 창이 떠오릅니다.

**캡처**

여기서 지시하는대로 문서의 제목, 작성자(Author)의 이름 등을 입력하세요. 그러면, 파일 하나가 생성됩니다.

그 다음 Visual이라고 되어 있는 모드를 Source로 바꿔주세요. (Visual 모드를 사용해도 되지만, 우리는 Source 모드를 이용하겠습니다.)

**캡처**

마지막으로 해당 파일을 저장해 주세요. 'File' 메뉴에서 'Save'를 클릭한 후, 파일명을 정해주면 됩니다. 확장자는 `qmd`가 됩니다.

이제 여러분은 노트북 환경을 이용하기 위한 준비가 되었습니다. 


## 노트북 이용하기


노트북 환경은 구체적으로는 다음과 같습니다.

**그림**

이 노트북 환경은 크게 세 부분으로 이루어집니다. 첫번째, `---`로 둘러싸여 저자, 제목 등의 정보를 제공하는 부분입니다. 이는 `YAML header`라고 부르는데요, 꼭 있어야 하는 부분은 아닙니다. 하지만 조금 후에 굉장히 유용해 질 것이므로, 그대로 이용하실 것을 권장합니다. 제목(title)이나, 저자(author)의 내용에 해당하는 부분은 원하는대로 바꾸어도 좋습니다.

두번째 부분은 코드가 쓰여지는 `chunk`라고 부르는 부분입니다. `chunk`는 세 개의 "backtick", 즉 "역따옴표"로 코드를 둘러싸서 표현합니다. 역따옴표에 익숙지 않다면, 키도드 숫자 1 왼쪽에 있는 키가 역따옴표를 사용하기 위한 키 입니다. 여러분들은 주로 `shift` 키와 함께 물결 표시를 사용하기 위해 더 자주 사용했을 것입니다. `Rstudio`는 세 개의 역따옴표 있는 문자를 모두 프로그래밍 코드라고 인식합니다. 

특히, 시작하는 세 개의 역따옴표 옆에 `{r}`이라고 쓰게되면, 이제 `Rstudio`는 해당 chunk 안의 모든 문자를 다른 프로그램도 아닌 `R` 문법으로 작성한 코드라고 생각합니다. 만약, chunk 안에서 R 문법에 어긋나는 문자가 있다면 에러가 발생하게 될 것입니다.

역따옴표와 사용할 프로그램을 표시하여 (예컨대, ````{r}`이라고 표시하여) `R` 코드임이 명확해지면, `Rstudio`는 chunk가 시작하는 줄 오른쪽에 작은 플레이 버튼 같은 것을 표시합니다. 이 버튼을 클릭해 보세요. 그러면 해당 chunk에 쓴 R 코드가 실행되고, 그 결과는 해당 코드 바로 밑에 표시됩니다. 이런 식으로 스크립트를 작성하면서, 즉시 콘솔에서처럼 결과도 확인할 수 있게 되는 것이지요. 

마지막 부분은 앞의 두 요소 밖에 있는 모든 문자들 입니다. 이는 물론 일반 텍스트를 뜻합니다. 이 부분은 글을 쓰듯 자유롭게 작성하면 됩니다. 사실 아무 것도 아닌 것 같지만, 이렇게 내가 쓰고 싶은 글과 R 코드, 그리고 R 코드의 결과물까지 하나의 텍스트 파일 위에서 표현할 수 있게 됩니다. 마치 다음 그림 처럼요.

**그림**

마치 하나의 웹페이지 화면처럼 보이지 않나요? 실제로 텍스트 파일 상단에 있는 `Render` 버튼을 누르기만 하면 바로 웹페이지를 만들어냅니다. 더 정확하게는 해당 `qmd`파일을 일종의 스크립트 삼아, 텍스트 부분은 텍스트로 표현하고, chunk에 해당하는 부분은 코드를 실행시킨 다음, 그 결과까지 모두 포함하여 하나의 HTML 파일을 만들어 냅니다. 여러분이 사용하고 있는 프로젝트 폴더에 들어가보세요. 방금 `Render`한 `qmd`파일과 같은 파일명을 가진 HTML 파일이 생성되어 있을 것입니다. 그 파일을 더블클릭하면, 여러분이 사용하는 브라우저를 통해 마치 웹페이지처럼 정돈된 결과물을 볼 수 있습니다. 

방금 `Render`한 `qmd` 파일에서 일반 텍스트가 여러분이 작성한 기사 내용, 그리고 chunk가 여러분이 독자들에게 보이고자 하는 데이터 시각화를 시행하는 코드라고 생각해 보세요! 그러면 여러분은 이미 인터넷으로 배포할 수 있는 기사 웹페이지 하나를 만든 셈입니다! 

## 마크다운 문법
`Rstudio`가 우리가 작성한 `qmd` 파일에서 코드에 해당하는 부분, 일반 텍스트에 해당하는 부분을 자동으로 구분하고 다양한 기능을 사용할 수 있게 해줄 뿐만 아니라, 심지어 웹페이지로까지 만들어 주는 것은 우리가 `Rstudio`가 이해할 수 있는 특정 문법을 따르기 때문입니다. 이 문법을 '마크다운(markdown)'이라고 부릅니다. 사실 확장자명 `qmd`에서 "md"가 마크다운(markdown)을 뜻하지요. 앞서 사용한 "---" "```{r}" 이런 것들이 마크다운 문법 중 일부입니다. 마크다운의 문법은 물론 이것 말고도 다양합니다. 

우리는 앞서 `Rstudio`가 chunk 안에 있는 문자는 코드로 인식해 실행하고, 그 밖의 문자는 텍스트 그대로 표현한다고 했습니다. 사실 이는 정확한 이야기가 아닙니다. 왜냐하면 `Rstudio`가 chunk 밖의 문자를 일반 텍스트로 인식하는 것은 맞지만, 일반 텍스트에 여러 효과를 부여하기 위한 몇 가지 간단한 문법이 있기 때문이지요. 이러한 문법들은 써도 그만, 안 써도 그만이지만 시각적으로 더 효율적인 웹페이지를 생성하기 위해 유용합니다. 예컨대 다음과 같은 것들이 그 문법에 해당합니다. 


> *italic* **bold** ~~strikeout~~ `code`
> ## Headings
> 
> # 1st Level Header
> 
> ## 2nd Level Header
>
> ### 3rd Level Header
> 
> ## Lists
>
> -   Bulleted list item 1
>
> -   Item 2
>
>    -   Item 2a
>
>    -   Item 2b
>
> 1.  Numbered list item 1
> 
> 2.  Item 2.
>     The numbers are incremented automatically in the output.
>
> ## Links and images
>
> <http://example.com>
>
> [linked phrase](http://example.com)
>
> ## Tables
>
> | First Header | Second Header |
> |--------------|---------------|
> | Content Cell | Content Cell  |
> | Content Cell | Content Cell  |


이러한 문법들은 `Render` 버튼을 누르면 웹페이지를 위한 적절한 시각 요소로 번역됩니다.

## 마크다운과 마크업
사실 "마크다운"이라는 용어는 일종의 말장난입니다. 원래는 "마크업(markup)"이라는 용어가 먼저 있었지요. 마크업이라는 것은 일반 텍스트에 "여러 표시를 해서(mark up)", 텍스트에 여러 효과와 형식을 부여하는 문법을 의미합니다. 가장 대표적인 예가 바로 HTML 이죠.

```
<!DOCTYPE html>
<html>
<body>

<h1> 이것은 제목 입니다</h1>

<p> 이것은 문단 입니다 </p>

</body>
</html>
```

여기에 쓰여진 "이것은 제목 입니다", "이것은 문단 입니다" 등의 텍스트들은 바로 우리가 전달하고 싶은 텍스트 정보 입니다. 하지만 효율적으로 이를 독자들에게 전달하기 위해서는 약간의 양식이 있으면 좋겠죠. 따라서 제목은 제목처럼 보이게 문단은 문단처럼 보이게 하는 양식 정보를 전달하는 것이 '<h1> </h1>', '<p> </p>' 같은 HTML 문법입니다. 구글 크롬, 마이크로소프트 엣지 같은 웹브라우저는 이러한 양식을 이해해서 이용자에게 텍스트를 그대로 전달하는 것이 아니라, 양식이 부여된 텍스트 시각화해서(이를 "Render"라고 합니다) 보여주는 역할을 합니다.

사실 이렇게 텍스트에다 여러 양식정보를 부가하는(즉, 마크업하는) 문법은 HTML말고도 여러개가 있습니다. 이들을 통틀어 '마크업 언어'라고 하지요. 그런데, 위의 HTML 문서에서 알 수 있듯이, 단 두문장을 전달하는 데에도 사용해야 할 문법이 꽤나 복잡하고 많습니다. 이 때문에 개발자들은 텍스트에 양식을 부과하되, 사람이 직관적으로 이해할 수 있는 좀 간단한 문법이 없을까? 라는 생각을 하게되었습니다. 그 결과물이 바로 '마크다운'이지요, 즉, 마크'업'이 너무 복잡해서 간단하게 만든 새로운 마크업 문법이 마크'다운'이라는 것입니다. 

이제 간단한 마크다운 문법을 알면 이용자는 HTML 같이 복잡한 마크업 문법을 몰라도 웹페이지를 간단하게 만들 수 있습니다. Rstudio가 내장하고 있는 프로그램이 마크다운 문서를 HTML로 다시 재번역해 주거든요(그것이 여러분이 `Rstudio`에서 이용하는 `Render` 버튼의 의미입니다). 여러분들이 매일 이용하는 웹브라우저는 이렇게 번역된 HTML을 이해할 수 있으니 여러분은 뉴스 작성을 위해 HTML을 따로 공부할 필요가 없습니다.

**마크업 -> pandoc -> HTML -> 웹브라우저**

명심하세요! 여러분들은 이 책을 통해 연습을 하는 동안 항상 `qmd` 파일을 하나 만들어 마크다운 문법을 이요해 코드와 텍스트를 동시에 작성하고 이를 HTML로 렌더하는 작업을 반복할 것입니다. 그 외에도 `R`을 사용하는 여러 방법이 있지만, 일단 가장 쉽고 기사 작성을 위해 유용한 이 방법을 반복해서 사용하세요! 
